"use client"

import { useEffect, useState, FormEvent } from "react"
import { FaFacebook, FaInstagram, FaTwitter, FaYoutube, FaLinkedin, FaBehance, FaDribbble, FaPinterest } from "react-icons/fa"
import { Country, State, City } from 'country-state-city'
import Header from '../header'
import Footer from '../footer'
import CallToAction from "../call-to-action"
import "../styles/all.css"

interface FormData {
  fullName: string;
  email: string;
  phoneNumber: string;
  companyName: string;
  callType: string;
  callbackTime: string;
  enquiryNature: string;
  existingCustomer: string;
  additionalInfo: string;
}

export default function QuotationPage() {
  // Form state
  const [formData, setFormData] = useState<FormData>({
    fullName: '',
    email: '',
    phoneNumber: '',
    companyName: '',
    callType: '',
    callbackTime: '',
    enquiryNature: '',
    existingCustomer: 'No',
    additionalInfo: ''
  });
  
  // Location state
  const [selectedCountry, setSelectedCountry] = useState('');
  const [selectedState, setSelectedState] = useState('');
  const [states, setStates] = useState<{isoCode: string; name: string}[]>([]);
  const [cities, setCities] = useState<{name: string}[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // Get all countries
  const countries = Country.getAllCountries();
  
  // Update states when country changes
  useEffect(() => {
    if (selectedCountry) {
      const countryStates = State.getStatesOfCountry(selectedCountry);
      setStates(countryStates);
      setSelectedState('');
      setCities([]);
    } else {
      setStates([]);
      setCities([]);
    }
  }, [selectedCountry]);
  
  // Update cities when state changes
  useEffect(() => {
    if (selectedCountry && selectedState) {
      const stateCities = City.getCitiesOfState(selectedCountry, selectedState);
      setCities(stateCities);
    } else {
      setCities([]);
    }
  }, [selectedCountry, selectedState]);

  // Handle form input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle phone number input (only numbers, max 10 digits)
  const handlePhoneInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.replace(/\D/g, '').slice(0, 10);
    setFormData(prev => ({
      ...prev,
      phoneNumber: value
    }));
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Basic validation
    if (!formData.fullName || !formData.email || !formData.phoneNumber || 
        !formData.callType || !formData.callbackTime || !formData.enquiryNature) {
      alert('Please fill in all required fields');
      return;
    }

    // Email validation
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      alert('Please enter a valid email address');
      return;
    }

    // Phone validation
    if (!/^\d{10}$/.test(formData.phoneNumber)) {
      alert('Please enter a valid 10-digit phone number');
      return;
    }

    setIsSubmitting(true);

    try {
      const response = await fetch('https://api.web3forms.com/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          access_key: 'eae59eb7-b97f-42ef-b91c-fe683c9e3d09',
          from_name: formData.fullName,
          email: formData.email,
          phone: formData.phoneNumber,
          subject: 'New Quotation Request',
          message: `
            Call Type: ${formData.callType}
            Time for Callback: ${formData.callbackTime}
            Nature of Enquiry: ${formData.enquiryNature}
            Full Name: ${formData.fullName}
            Company Name: ${formData.companyName || 'N/A'}
            Phone Number: ${formData.phoneNumber}
            Country: ${selectedCountry ? countries.find(c => c.isoCode === selectedCountry)?.name : 'N/A'}
            State: ${selectedState ? states.find(s => s.isoCode === selectedState)?.name : 'N/A'}
            City: ${cities.length > 0 ? cities[0].name : 'N/A'}
            Existing Customer: ${formData.existingCustomer}
            Additional Information: ${formData.additionalInfo || 'N/A'}
          `,
          to_email: 'sindhav88@gmail.com'
        })
      });

      const result = await response.json();

      if (result.success) {
        alert('Thank you for your submission! We will get back to you soon.');
        // Reset form
        setFormData({
          fullName: '',
          email: '',
          phoneNumber: '',
          companyName: '',
          callType: '',
          callbackTime: '',
          enquiryNature: '',
          existingCustomer: 'No',
          additionalInfo: ''
        });
        setSelectedCountry('');
        setSelectedState('');
        setStates([]);
        setCities([]);
      } else {
        throw new Error(result.message || 'Something went wrong');
      }
    } catch (error) {
      console.error('Error submitting form:', error);
      alert('There was an error submitting your form. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      <Header />
      <section className="mp-5 pt-0 mb-5">
        <div className="container">
          <div className="request-form-box row">
            <div className="col-8">
              <div className="request-form-content-box">
                <h3 className="mb-5 mt-5">Request A Quotation</h3>
                <form id="callbackForm" className="needs-validation" noValidate onSubmit={handleSubmit}>
                  <div className="row">
                    <div className="col-6">
                      <div className="mb-3">
                        <label htmlFor="fullName" className="form-label">
                          Full Name <span className="text-danger">*</span>
                        </label>
                        <input 
                          type="text" 
                          className="form-control" 
                          id="fullName" 
                          name="fullName"
                          value={formData.fullName}
                          onChange={handleInputChange}
                          required 
                        />
                        <div className="invalid-feedback">Please enter your full name.</div>
                      </div>
                    </div>
                    <div className="col-6">
                      <div className="mb-3">
                        <label htmlFor="email" className="form-label">
                          Email Address <span className="text-danger">*</span>
                        </label>
                        <input 
                          type="email" 
                          className="form-control" 
                          id="email" 
                          name="email"
                          value={formData.email}
                          onChange={handleInputChange}
                          required 
                        />
                        <div className="invalid-feedback">Please enter a valid email address.</div>
                      </div>
                    </div>
                  </div>

                  <div className="row">
                    <div className="col-6">
                      <div className="mb-3">
                        <label htmlFor="phoneNumber" className="form-label">
                          Phone Number <span className="text-danger">*</span>
                        </label>
                        <input 
                          type="tel" 
                          className="form-control" 
                          id="phoneNumber" 
                          name="phoneNumber"
                          value={formData.phoneNumber}
                          onChange={handlePhoneInput}
                          required 
                        />
                        <div className="invalid-feedback">Please enter a valid 10-digit phone number.</div>
                      </div>
                    </div>
                    <div className="col-6">
                      <div className="mb-3">
                        <label htmlFor="companyName" className="form-label">
                          Company Name
                        </label>
                        <input 
                          type="text" 
                          className="form-control" 
                          id="companyName" 
                          name="companyName"
                          value={formData.companyName}
                          onChange={handleInputChange}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Add the rest of your form fields here with similar patterns */}
                  {/* ... */}

                  <div className="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button 
                      className="btn btn-primary me-md-2" 
                      type="submit"
                      disabled={isSubmitting}
                    >
                      {isSubmitting ? 'Submitting...' : 'Submit'}
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </section>
      <Footer />
    </>
  );
}
